Notes.

This is not thread safe yet.  In particular, the use of mutation with nil
in delete is definitely not thread-safe.  I really do need to modify
the code so each tree has its own concept of nil.


----------------------------------------------------------------------

Looking for:

http://dx.doi.org/10.1137/1.9781611970265

I want to look at Tarjan's paper on split, just to make sure I've
done it similarly.

----------------------------------------------------------------------


The optimization introduced in:

    47e5462c135f05d9bbff4284e1f60d01aacfd50b

may not be really worth it.  It only shaves a few milliseconds
off of split: when doing:

     (test-case
      "(1 ... n) ---split-k--> (1 ... k-1) (k+1 ...n)"
      (printf "exhaustive split test...\n")
      (define N 5000)
      (define elts (for/list ([i (in-range N)]) i))
      (define total-splitting-time 0)
      (for ([n (in-range N)])
        (define t (new-tree))
        (for ([w (in-list elts)])
          (insert-last/data! t w 1))
        (define-values (l r) 
          (time-acc 
           total-splitting-time
           (split! t (search t n))))
        (void))
      (printf "time in split: ~a\n" total-splitting-time))))


I can see only a small difference:

    old:
    time in split: 76.272705078125
    time in split: 75.196533203125
    time in split: 73.4248046875
    time in split: 75.096435546875


    after the optimization:
    time in split: 69.46337890625
    time in split: 72.383056640625
    time in split: 72.555419921875
    time in split: 72.49853515625


I'll keep the optimization for now, because maybe it will be worth it
when we're dealing with a lot more nodes.